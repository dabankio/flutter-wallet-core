// Objective-C API for talking to github.com/dabankio/wallet-core/core/eth Go package.
//   gobind -lang=objc github.com/dabankio/wallet-core/core/eth
//
// File is generated by gobind. Do not edit.

#ifndef __Eth_H__
#define __Eth_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Bip44.objc.h"

@class EthAddressesWrap;
@class EthBigInt;
@class EthByte32ArrayWrap;
@class EthERC20InterfaceABIHelper;
@class EthETHAddress;
@class EthETHTransaction;
@class EthHash;
@class EthSimpleMultiSigABIHelper;
@class EthSimpleMultiSigExecuteSignResult;
@class EthSizedByteArray;
@class EthUint8ArrayWrap;

/**
 * AddressesWrap 地址数组包装
 */
@interface EthAddressesWrap : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAddressesWrap .
 */
- (nullable instancetype)init;
/**
 * AddOne 追加一个地址
 */
- (void)addOne:(EthETHAddress* _Nullable)addr;
@end

/**
 * A BigInt represents a signed multi-precision integer.
 */
@interface EthBigInt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
- (nullable instancetype)init:(int64_t)x;
/**
 * GetBytes returns the absolute value of x as a big-endian byte slice.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetInt64 returns the int64 representation of x. If x cannot be represented in
an int64, the result is undefined.
 */
- (int64_t)getInt64;
/**
 * SetBytes interprets buf as the bytes of a big-endian unsigned integer and sets
the big int to that value.
 */
- (void)setBytes:(NSData* _Nullable)buf;
/**
 * SetInt64 sets the big int to x.
 */
- (void)setInt64:(int64_t)x;
/**
 * SetString sets the big int to x.

The string prefix determines the actual conversion base. A prefix of "0x" or
"0X" selects base 16; the "0" prefix selects base 8, and a "0b" or "0B" prefix
selects base 2. Otherwise the selected base is 10.
 */
- (void)setString:(NSString* _Nullable)x base:(long)base;
/**
 * Sign returns:

	-1 if x <  0
	 0 if x == 0
	+1 if x >  0
 */
- (long)sign;
/**
 * String returns the value of x as a formatted decimal string.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Byte32ArrayWrap wrap [][32]byte
 */
@interface EthByte32ArrayWrap : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewByte32ArrayWrap .
 */
- (nullable instancetype)init;
/**
 * AddOne len of bytes shoule be 32
 */
- (BOOL)addOne:(NSData* _Nullable)b error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ERC20InterfaceABIHelper tool for contract abi
 */
@interface EthERC20InterfaceABIHelper : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewERC20InterfaceABIHelper constructor
 */
- (nullable instancetype)init;
/**
 * PackedAllowance is a free data retrieval call binding the contract method 0xdd62ed3e.
Solidity: function allowance(address tokenOwner, address spender) constant returns(uint256 remaining)
 */
- (NSData* _Nullable)packedAllowance:(EthETHAddress* _Nullable)tokenOwner spender:(EthETHAddress* _Nullable)spender error:(NSError* _Nullable* _Nullable)error;
/**
 * PackedApprove is a paid mutator transaction binding the contract method 0x095ea7b3.
Solidity: function approve(address spender, uint256 tokens) returns(bool success)
 */
- (NSData* _Nullable)packedApprove:(EthETHAddress* _Nullable)spender tokens:(EthBigInt* _Nullable)tokens error:(NSError* _Nullable* _Nullable)error;
/**
 * PackedBalanceOf is a free data retrieval call binding the contract method 0x70a08231.
Solidity: function balanceOf(address tokenOwner) constant returns(uint256 balance)
 */
- (NSData* _Nullable)packedBalanceOf:(EthETHAddress* _Nullable)tokenOwner error:(NSError* _Nullable* _Nullable)error;
/**
 * PackedTotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
Solidity: function totalSupply() constant returns(uint256)
 */
- (NSData* _Nullable)packedTotalSupply:(NSError* _Nullable* _Nullable)error;
/**
 * PackedTransfer is a paid mutator transaction binding the contract method 0xa9059cbb.
Solidity: function transfer(address to, uint256 tokens) returns(bool success)
 */
- (NSData* _Nullable)packedTransfer:(EthETHAddress* _Nullable)to tokens:(EthBigInt* _Nullable)tokens error:(NSError* _Nullable* _Nullable)error;
/**
 * PackedTransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
Solidity: function transferFrom(address from, address to, uint256 tokens) returns(bool success)
 */
- (NSData* _Nullable)packedTransferFrom:(EthETHAddress* _Nullable)from to:(EthETHAddress* _Nullable)to tokens:(EthBigInt* _Nullable)tokens error:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackAllowance is a free data retrieval call binding the contract method 0xdd62ed3e.
Solidity: function allowance(address tokenOwner, address spender) constant returns(uint256 remaining)
 */
- (EthBigInt* _Nullable)unpackAllowance:(NSData* _Nullable)output error:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackBalanceOf is a free data retrieval call binding the contract method 0x70a08231.
Solidity: function balanceOf(address tokenOwner) constant returns(uint256 balance)
 */
- (EthBigInt* _Nullable)unpackBalanceOf:(NSData* _Nullable)output error:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackTotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
Solidity: function totalSupply() constant returns(uint256)
 */
- (EthBigInt* _Nullable)unpackTotalSupply:(NSData* _Nullable)output error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ETHAddress represents the 20 byte address of an Ethereum account.
 */
@interface EthETHAddress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewETHAddress 0地址
 */
- (nullable instancetype)init;
/**
 * NewETHAddressFromHex converts a hex string to a address value.
 */
- (nullable instancetype)initFromHex:(NSString* _Nullable)hex;
/**
 * GetBytes retrieves the byte representation of the address.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the address.
 */
- (NSString* _Nonnull)getHex;
/**
 * SetBytes sets the specified slice of bytes as the address value.
 */
- (BOOL)setBytes:(NSData* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * SetHex sets the specified hex string as the address value.
 */
- (BOOL)setHex:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ETHTransaction represents a single Ethereum transaction.
 */
@interface EthETHTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewETHTransaction creates a new ether transaction with the given properties.
 */
- (nullable instancetype)init:(int64_t)nonce to:(EthETHAddress* _Nullable)to amount:(EthBigInt* _Nullable)amount gasLimit:(int64_t)gasLimit gasPrice:(EthBigInt* _Nullable)gasPrice data:(NSData* _Nullable)data;
/**
 * NewETHTransactionForContractCreation 创建一个部署合约交易(amount 为 0)
 */
- (nullable instancetype)initForContractCreation:(int64_t)nonce gasLimit:(int64_t)gasLimit gasPrice:(EthBigInt* _Nullable)gasPrice data:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a transaction into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a transaction into an hex RLP data dump.
 */
- (NSString* _Nonnull)encodeRLP:(NSError* _Nullable* _Nullable)error;
/**
 * GetCost .
 */
- (EthBigInt* _Nullable)getCost;
/**
 * GetData .
 */
- (NSData* _Nullable)getData;
/**
 * GetGas .
 */
- (int64_t)getGas;
/**
 * GetGasPrice .
 */
- (EthBigInt* _Nullable)getGasPrice;
/**
 * GetHash .
 */
- (EthHash* _Nullable)getHash;
/**
 * GetNonce .
 */
- (int64_t)getNonce;
/**
 * GetTo .
 */
- (EthETHAddress* _Nullable)getTo;
/**
 * GetValue .
 */
- (EthBigInt* _Nullable)getValue;
@end

/**
 * Hash represents the 32 byte Keccak256 hash of arbitrary data.
 */
@interface EthHash : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetBytes retrieves the byte representation of the hash.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the hash.
 */
- (NSString* _Nonnull)getHex;
/**
 * SetBytes sets the specified slice of bytes as the hash value.
 */
- (BOOL)setBytes:(NSData* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SetHex sets the specified hex string as the hash value.
 */
- (BOOL)setHex:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * SimpleMultiSigABIHelper tool for contract abi
 */
@interface EthSimpleMultiSigABIHelper : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSimpleMultiSigABIHelper constructor
 */
- (nullable instancetype)init;
/**
 * PackedExecute is a paid mutator transaction binding the contract method 0xa0ab9653.
Solidity: function execute(uint8[] sigV, bytes32[] sigR, bytes32[] sigS, address destination, uint256 value, bytes data, address executor, uint256 gasLimit) returns()
 */
- (NSData* _Nullable)packedExecute:(EthUint8ArrayWrap* _Nullable)sigV sigR:(EthByte32ArrayWrap* _Nullable)sigR sigS:(EthByte32ArrayWrap* _Nullable)sigS destination:(EthETHAddress* _Nullable)destination value:(EthBigInt* _Nullable)value data:(NSData* _Nullable)data executor:(EthETHAddress* _Nullable)executor gasLimit:(EthBigInt* _Nullable)gasLimit error:(NSError* _Nullable* _Nullable)error;
/**
 * PackedGetOwersLength is a free data retrieval call binding the contract method 0xca7541ee.
Solidity: function getOwersLength() constant returns(int8)
 */
- (NSData* _Nullable)packedGetOwersLength:(NSError* _Nullable* _Nullable)error;
/**
 * PackedGetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
Solidity: function getVersion() constant returns(string)
 */
- (NSData* _Nullable)packedGetVersion:(NSError* _Nullable* _Nullable)error;
/**
 * PackedNonce is a free data retrieval call binding the contract method 0xaffed0e0.
Solidity: function nonce() constant returns(uint256)
 */
- (NSData* _Nullable)packedNonce:(NSError* _Nullable* _Nullable)error;
/**
 * PackedOwnersArr is a free data retrieval call binding the contract method 0xaa5df9e2.
Solidity: function ownersArr(uint256 ) constant returns(address)
 */
- (NSData* _Nullable)packedOwnersArr:(EthBigInt* _Nullable)arg0 error:(NSError* _Nullable* _Nullable)error;
/**
 * PackedThreshold is a free data retrieval call binding the contract method 0x42cde4e8.
Solidity: function threshold() constant returns(uint256)
 */
- (NSData* _Nullable)packedThreshold:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackGetOwersLength is a free data retrieval call binding the contract method 0xca7541ee.
Solidity: function getOwersLength() constant returns(int8)
 */
- (BOOL)unpackGetOwersLength:(NSData* _Nullable)output ret0_:(int8_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackGetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
Solidity: function getVersion() constant returns(string)
 */
- (NSString* _Nonnull)unpackGetVersion:(NSData* _Nullable)output error:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackNonce is a free data retrieval call binding the contract method 0xaffed0e0.
Solidity: function nonce() constant returns(uint256)
 */
- (EthBigInt* _Nullable)unpackNonce:(NSData* _Nullable)output error:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackOwnersArr is a free data retrieval call binding the contract method 0xaa5df9e2.
Solidity: function ownersArr(uint256 ) constant returns(address)
 */
- (EthETHAddress* _Nullable)unpackOwnersArr:(NSData* _Nullable)output error:(NSError* _Nullable* _Nullable)error;
/**
 * UnpackThreshold is a free data retrieval call binding the contract method 0x42cde4e8.
Solidity: function threshold() constant returns(uint256)
 */
- (EthBigInt* _Nullable)unpackThreshold:(NSData* _Nullable)output error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * SimpleMultiSigExecuteSignResult .
 */
@interface EthSimpleMultiSigExecuteSignResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSimpleMultiSigExecuteSignResultFromHex decode from hex string
 */
- (nullable instancetype)initFromHex:(NSString* _Nullable)h;
@property (nonatomic) EthSizedByteArray* _Nullable r;
@property (nonatomic) EthSizedByteArray* _Nullable s;
@property (nonatomic) int8_t v;
/**
 * ToHex 转为hex string方便传输
 */
- (NSString* _Nonnull)toHex;
@end

/**
 * SizedByteArray 固定长度的字节数组(固定长度意味着修改时长度需要与原来的一致)
 */
@interface EthSizedByteArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSizedByteArray 创建一个定长字节数组
 */
- (nullable instancetype)init:(NSData* _Nullable)b;
/**
 * Get return byte array
 */
- (NSData* _Nullable)get;
/**
 * Set 如果长度与原来的不一致则报错
 */
- (BOOL)set:(NSData* _Nullable)b error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Uint8ArrayWrap wrap []uint8,注意：虽然名字是uint8 array wrap,但实际只能是0-128，因为gomobile不支持unsigned int,操作的时候用int8
 */
@interface EthUint8ArrayWrap : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewUint8ArrayWrap .
 */
- (nullable instancetype)init;
/**
 * AddOne 注意：不支持负数，传入负数时会返回错误（安卓抛出异常，ios没试过。。)
 */
- (BOOL)addOne:(int8_t)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ERC20InterfaceABI is the input ABI used to generate the binding from.
 */
FOUNDATION_EXPORT NSString* _Nonnull const EthERC20InterfaceABI;
/**
 * SimpleMultiSigABI is the input ABI used to generate the binding from.
 */
FOUNDATION_EXPORT NSString* _Nonnull const EthSimpleMultiSigABI;

@interface Eth : NSObject
// skipped variable New with unsupported type: func(seed []byte) (c *github.com/dabankio/wallet-core/core/eth/internal.eth, err error)

// skipped variable NewFromMetadata with unsupported type: func(md github.com/dabankio/wallet-core/core.MetadataProvider) (c *github.com/dabankio/wallet-core/core/eth/internal.eth, err error)

/**
 * SimpleMultiSigBin is the compiled bytecode used for deploying new contracts.
 */
+ (NSString* _Nonnull) simpleMultiSigBin;
+ (void) setSimpleMultiSigBin:(NSString* _Nonnull)v;

// skipped variable SimpleMultiSigFuncSigs with unsupported type: map[string]string

@end

/**
 * Hello 返回简单的hello 字符串，可用于验证api调用
 */
FOUNDATION_EXPORT NSString* _Nonnull EthHello(void);

/**
 * NewAddressesWrap .
 */
FOUNDATION_EXPORT EthAddressesWrap* _Nullable EthNewAddressesWrap(void);

/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
FOUNDATION_EXPORT EthBigInt* _Nullable EthNewBigInt(int64_t x);

/**
 * NewBip44Deriver eth bip44 实现
 */
FOUNDATION_EXPORT id<Bip44Deriver> _Nullable EthNewBip44Deriver(NSData* _Nullable seed, NSError* _Nullable* _Nullable error);

/**
 * NewByte32ArrayWrap .
 */
FOUNDATION_EXPORT EthByte32ArrayWrap* _Nullable EthNewByte32ArrayWrap(void);

/**
 * NewERC20InterfaceABIHelper constructor
 */
FOUNDATION_EXPORT EthERC20InterfaceABIHelper* _Nullable EthNewERC20InterfaceABIHelper(void);

/**
 * NewETHAddress 0地址
 */
FOUNDATION_EXPORT EthETHAddress* _Nullable EthNewETHAddress(void);

/**
 * NewETHAddressFromHex converts a hex string to a address value.
 */
FOUNDATION_EXPORT EthETHAddress* _Nullable EthNewETHAddressFromHex(NSString* _Nullable hex, NSError* _Nullable* _Nullable error);

/**
 * NewETHTransaction creates a new ether transaction with the given properties.
 */
FOUNDATION_EXPORT EthETHTransaction* _Nullable EthNewETHTransaction(int64_t nonce, EthETHAddress* _Nullable to, EthBigInt* _Nullable amount, int64_t gasLimit, EthBigInt* _Nullable gasPrice, NSData* _Nullable data);

/**
 * NewETHTransactionForContractCreation 创建一个部署合约交易(amount 为 0)
 */
FOUNDATION_EXPORT EthETHTransaction* _Nullable EthNewETHTransactionForContractCreation(int64_t nonce, int64_t gasLimit, EthBigInt* _Nullable gasPrice, NSData* _Nullable data);

/**
 * NewSimpleMultiSigABIHelper constructor
 */
FOUNDATION_EXPORT EthSimpleMultiSigABIHelper* _Nullable EthNewSimpleMultiSigABIHelper(void);

/**
 * NewSimpleMultiSigExecuteSignResultFromHex decode from hex string
 */
FOUNDATION_EXPORT EthSimpleMultiSigExecuteSignResult* _Nullable EthNewSimpleMultiSigExecuteSignResultFromHex(NSString* _Nullable h, NSError* _Nullable* _Nullable error);

/**
 * NewSizedByteArray 创建一个定长字节数组
 */
FOUNDATION_EXPORT EthSizedByteArray* _Nullable EthNewSizedByteArray(NSData* _Nullable b);

/**
 * NewUint8ArrayWrap .
 */
FOUNDATION_EXPORT EthUint8ArrayWrap* _Nullable EthNewUint8ArrayWrap(void);

/**
 * PackedDeploySimpleMultiSig deploys a new Ethereum contract, binding an instance of SimpleMultiSig to it.
 */
FOUNDATION_EXPORT NSData* _Nullable EthPackedDeploySimpleMultiSig(EthBigInt* _Nullable threshold_, EthAddressesWrap* _Nullable owners_, EthBigInt* _Nullable chainId, NSError* _Nullable* _Nullable error);

/**
 * SignRawTransaction .
 */
FOUNDATION_EXPORT NSString* _Nonnull EthSignRawTransaction(NSString* _Nullable msg, NSString* _Nullable privateKey, NSError* _Nullable* _Nullable error);

/**
 * UtilSimpleMultiSigExecuteSign 签名简单多签执行数据
 */
FOUNDATION_EXPORT EthSimpleMultiSigExecuteSignResult* _Nullable EthUtilSimpleMultiSigExecuteSign(int64_t chainID, NSString* _Nullable signerPrivkHex, NSString* _Nullable hexedMultisigAddr, NSString* _Nullable hexedDestinationAddr, NSString* _Nullable hexedExecutor, int64_t nonce, EthBigInt* _Nullable value, EthBigInt* _Nullable gasLimit, NSData* _Nullable data, NSError* _Nullable* _Nullable error);

#endif
